"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Loader2, Sparkles, Clock, Users, ChefHat } from "lucide-react"

interface Mood {
  id: string
  name: string
  emoji: string
  color: string
  description: string
}

interface Recipe {
  id: string
  name: string
  description: string
  ingredients: string[]
  instructions: string[]
  cookTime: string
  servings: number
  difficulty: "–õ–µ–≥–∫–æ" | "–°—Ä–µ–¥–Ω–µ" | "–°–ª–æ–∂–Ω–æ"
  mood: string
  image: string
}

const moods: Mood[] = [
  {
    id: "happy",
    name: "–í–µ—Å—ë–ª—ã–π",
    emoji: "üòÑ",
    color: "bg-yellow-400",
    description: "–Ø—Ä–∫–∏–µ –∏ –∫—Ä–∞—Å–æ—á–Ω—ã–µ –±–ª—é–¥–∞",
  },
  {
    id: "tired",
    name: "–£—Å—Ç–∞–≤—à–∏–π",
    emoji: "üò¥",
    color: "bg-blue-400",
    description: "–ü—Ä–æ—Å—Ç—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞",
  },
  {
    id: "angry",
    name: "–ó–ª–æ–π",
    emoji: "üò†",
    color: "bg-red-400",
    description: "–û—Å—Ç—Ä—ã–µ –∏ –ø—Ä—è–Ω—ã–µ –±–ª—é–¥–∞",
  },
  {
    id: "sad",
    name: "–ì—Ä—É—Å—Ç–Ω—ã–π",
    emoji: "üò¢",
    color: "bg-purple-400",
    description: "–£—Ç–µ—à–∞—é—â–∏–µ –±–ª—é–¥–∞ –¥–ª—è –¥—É—à–∏",
  },
  {
    id: "excited",
    name: "–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–π",
    emoji: "ü§©",
    color: "bg-pink-400",
    description: "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞",
  },
  {
    id: "calm",
    name: "–°–ø–æ–∫–æ–π–Ω—ã–π",
    emoji: "üòå",
    color: "bg-green-400",
    description: "–õ—ë–≥–∫–∏–µ –∑–¥–æ—Ä–æ–≤—ã–µ –±–ª—é–¥–∞",
  },
  {
    id: "romantic",
    name: "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π",
    emoji: "üòç",
    color: "bg-rose-400",
    description: "–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è –¥–≤–æ–∏—Ö",
  },
  {
    id: "adventurous",
    name: "–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π",
    emoji: "ü§†",
    color: "bg-orange-400",
    description: "–ù–µ–æ–±—ã—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã",
  },
  {
    id: "nostalgic",
    name: "–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–Ω—ã–π",
    emoji: "ü•∫",
    color: "bg-amber-400",
    description: "–ë–ª—é–¥–∞ –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞",
  },
  {
    id: "energetic",
    name: "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
    emoji: "‚ö°",
    color: "bg-lime-400",
    description: "–ó–∞—Ä—è–∂–∞—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏–µ–π –±–ª—é–¥–∞",
  },
  {
    id: "cozy",
    name: "–£—é—Ç–Ω—ã–π",
    emoji: "üè†",
    color: "bg-teal-400",
    description: "–î–æ–º–∞—à–Ω–∏–µ —Å–æ–≥—Ä–µ–≤–∞—é—â–∏–µ –±–ª—é–¥–∞",
  },
  {
    id: "creative",
    name: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π",
    emoji: "üé®",
    color: "bg-indigo-400",
    description: "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ –±–ª—é–¥–∞",
  },
]

const predefinedRecipes: Recipe[] = [
  {
    id: "1",
    name: "–†–∞–¥—É–∂–Ω—ã–π —Å–∞–ª–∞—Ç",
    description: "–Ø—Ä–∫–∏–π —Å–∞–ª–∞—Ç —Å —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏ –∏ —Ñ—Ä—É–∫—Ç–∞–º–∏",
    ingredients: ["–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏", "–ú–æ—Ä–∫–æ–≤—å", "–û–≥—É—Ä—Ü—ã", "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü", "–ö—É–∫—É—Ä—É–∑–∞", "–ê–≤–æ–∫–∞–¥–æ"],
    instructions: ["–ù–∞—Ä–µ–∂—å—Ç–µ –≤—Å–µ –æ–≤–æ—â–∏", "–°–º–µ—à–∞–π—Ç–µ –≤ –±–æ–ª—å—à–æ–π –º–∏—Å–∫–µ", "–ó–∞–ø—Ä–∞–≤—å—Ç–µ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º"],
    cookTime: "15 –º–∏–Ω",
    servings: 2,
    difficulty: "–õ–µ–≥–∫–æ",
    mood: "happy",
    image: "/placeholder.svg?height=200&width=300",
  },
  {
    id: "2",
    name: "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø",
    description: "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—É–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª",
    ingredients: ["–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ú–æ—Ä–∫–æ–≤—å", "–õ—É–∫", "–õ–∞–ø—à–∞", "–ó–µ–ª–µ–Ω—å"],
    instructions: ["–û—Ç–≤–∞—Ä–∏—Ç–µ –∫—É—Ä–∏—Ü—É", "–î–æ–±–∞–≤—å—Ç–µ –æ–≤–æ—â–∏", "–í–∞—Ä–∏—Ç–µ 30 –º–∏–Ω—É—Ç", "–î–æ–±–∞–≤—å—Ç–µ –ª–∞–ø—à—É"],
    cookTime: "45 –º–∏–Ω",
    servings: 4,
    difficulty: "–õ–µ–≥–∫–æ",
    mood: "tired",
    image: "/placeholder.svg?height=200&width=300",
  },
  {
    id: "3",
    name: "–û—Å—Ç—Ä–∞—è –ø–∞—Å—Ç–∞ –ê—Ä–∞–±—å—è—Ç–∞",
    description: "–ü—Ä—è–Ω–∞—è –ø–∞—Å—Ç–∞ —Å –æ—Å—Ç—Ä—ã–º —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º",
    ingredients: ["–ü–∞—Å—Ç–∞ –ø–µ–Ω–Ω–µ", "–¢–æ–º–∞—Ç—ã", "–ß–µ—Å–Ω–æ–∫", "–û—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ü", "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", "–ë–∞–∑–∏–ª–∏–∫"],
    instructions: ["–û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –ø–µ—Ä–µ—Ü", "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–º–∞—Ç—ã", "–°–º–µ—à–∞–π—Ç–µ —Å –ø–∞—Å—Ç–æ–π", "–ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º"],
    cookTime: "25 –º–∏–Ω",
    servings: 2,
    difficulty: "–°—Ä–µ–¥–Ω–µ",
    mood: "angry",
    image: "/placeholder.svg?height=200&width=300",
  },
]

export default function MoodMeal() {
  const [selectedMood, setSelectedMood] = useState<Mood | null>(null)
  const [customMood, setCustomMood] = useState("")
  const [recipes, setRecipes] = useState<Recipe[]>([])
  const [isGenerating, setIsGenerating] = useState(false)
  const [showCustomInput, setShowCustomInput] = useState(false)

  const generateRecipes = async (mood: Mood | string) => {
    setIsGenerating(true)

    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    if (typeof mood === "object") {
      // Show predefined recipes for selected mood
      const moodRecipes = predefinedRecipes.filter((recipe) => recipe.mood === mood.id)
      setRecipes(moodRecipes)
    } else {
      // For custom mood, generate mock recipes
      const mockRecipes: Recipe[] = [
        {
          id: Date.now().toString(),
          name: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ",
          description: `–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ${mood}`,
          ingredients: ["–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–°–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É", "–°–≤–µ–∂–∏–µ —Ç—Ä–∞–≤—ã", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"],
          instructions: ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–ì–æ—Ç–æ–≤—å—Ç–µ —Å –ª—é–±–æ–≤—å—é", "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"],
          cookTime: "30 –º–∏–Ω",
          servings: 2,
          difficulty: "–°—Ä–µ–¥–Ω–µ",
          mood: "custom",
          image: "/placeholder.svg?height=200&width=300",
        },
      ]
      setRecipes(mockRecipes)
    }

    setIsGenerating(false)
  }

  const handleMoodSelect = (mood: Mood) => {
    setSelectedMood(mood)
    setShowCustomInput(false)
    generateRecipes(mood)
  }

  const handleCustomMoodSubmit = () => {
    if (customMood.trim()) {
      setSelectedMood(null)
      generateRecipes(customMood)
    }
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white border-b border-gray-100 sticky top-0 z-10 shadow-sm">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-center space-x-3">
            <div className="text-4xl">üçΩÔ∏è</div>
            <h1 className="text-4xl font-bold text-gray-800">MoodMeal</h1>
            <div className="text-4xl">‚ú®</div>
          </div>
          <p className="text-center text-gray-500 mt-2 text-lg">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ–¥—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é</p>
        </div>
      </header>

      <div className="container mx-auto px-4 py-12">
        {/* Mood Selection */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-800 mb-4">–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?</h2>
          <p className="text-gray-600 mb-8 text-lg max-w-2xl mx-auto">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å
          </p>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-8">
            {moods.map((mood) => (
              <Card
                key={mood.id}
                className={`cursor-pointer transition-all duration-300 hover:scale-105 border-2 hover:shadow-xl ${
                  selectedMood?.id === mood.id
                    ? "ring-4 ring-blue-200 shadow-xl border-blue-300"
                    : "border-gray-100 hover:border-gray-200"
                }`}
                onClick={() => handleMoodSelect(mood)}
              >
                <CardContent className="p-6 text-center">
                  <div className="text-5xl mb-3">{mood.emoji}</div>
                  <h3 className="font-bold text-lg text-gray-800 mb-2">{mood.name}</h3>
                  <p className="text-sm text-gray-500">{mood.description}</p>
                  <div className={`w-full h-1 ${mood.color} rounded-full mt-3`}></div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="flex flex-col items-center space-y-4">
            <Button
              variant="outline"
              onClick={() => setShowCustomInput(!showCustomInput)}
              className="border-2 border-dashed border-gray-300 hover:border-blue-400 hover:bg-blue-50 text-gray-600 hover:text-blue-600 px-8 py-3"
            >
              <Sparkles className="w-5 h-5 mr-2" />
              –û–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            </Button>

            {showCustomInput && (
              <div className="w-full max-w-md space-y-4 bg-gray-50 p-6 rounded-xl border border-gray-200">
                <Textarea
                  placeholder="–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."
                  value={customMood}
                  onChange={(e) => setCustomMood(e.target.value)}
                  className="resize-none border-gray-200 focus:border-blue-400 focus:ring-blue-200"
                  rows={3}
                />
                <Button
                  onClick={handleCustomMoodSubmit}
                  disabled={!customMood.trim()}
                  className="w-full bg-blue-500 hover:bg-blue-600 text-white py-3"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  –ù–∞–π—Ç–∏ –±–ª—é–¥–∞
                </Button>
              </div>
            )}
          </div>
        </div>

        {/* Loading State */}
        {isGenerating && (
          <div className="text-center py-16">
            <div className="bg-blue-50 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-6">
              <Loader2 className="w-10 h-10 animate-spin text-blue-500" />
            </div>
            <p className="text-xl font-semibold text-gray-800 mb-2">–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞...</p>
            <p className="text-gray-500">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</p>
          </div>
        )}

        {/* Recipes Display */}
        {recipes.length > 0 && !isGenerating && (
          <div className="space-y-8">
            <div className="text-center bg-gray-50 rounded-2xl p-8">
              <h3 className="text-2xl font-bold text-gray-800 mb-3">–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è {selectedMood?.emoji}</h3>
              <p className="text-gray-600 text-lg">
                {selectedMood ? selectedMood.description : `–ë–ª—é–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: "${customMood}"`}
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {recipes.map((recipe) => (
                <Card
                  key={recipe.id}
                  className="overflow-hidden hover:shadow-2xl transition-all duration-300 border-0 shadow-lg"
                >
                  <div className="relative">
                    <img
                      src={recipe.image || "/placeholder.svg"}
                      alt={recipe.name}
                      className="w-full h-48 object-cover"
                    />
                    <Badge className="absolute top-3 right-3 bg-white text-gray-700 shadow-md">
                      {recipe.difficulty}
                    </Badge>
                  </div>

                  <CardHeader className="pb-4">
                    <CardTitle className="flex items-center justify-between text-xl">
                      <span className="text-gray-800">{recipe.name}</span>
                      <ChefHat className="w-6 h-6 text-blue-500" />
                    </CardTitle>
                    <CardDescription className="text-gray-600 text-base">{recipe.description}</CardDescription>
                  </CardHeader>

                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center space-x-2 text-gray-500">
                        <Clock className="w-4 h-4" />
                        <span>{recipe.cookTime}</span>
                      </div>
                      <div className="flex items-center space-x-2 text-gray-500">
                        <Users className="w-4 h-4" />
                        <span>{recipe.servings} –ø–æ—Ä—Ü–∏–π</span>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-semibold mb-3 text-gray-800">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h4>
                      <ul className="space-y-2">
                        {recipe.ingredients.slice(0, 3).map((ingredient, index) => (
                          <li key={index} className="flex items-center space-x-3">
                            <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                            <span className="text-gray-600">{ingredient}</span>
                          </li>
                        ))}
                        {recipe.ingredients.length > 3 && (
                          <li className="text-gray-400 text-sm ml-5">
                            –∏ –µ—â—ë {recipe.ingredients.length - 3} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞...
                          </li>
                        )}
                      </ul>
                    </div>

                    <Button className="w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg">
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>

            <div className="text-center">
              <Button
                variant="outline"
                onClick={() => {
                  setRecipes([])
                  setSelectedMood(null)
                  setCustomMood("")
                  setShowCustomInput(false)
                }}
                className="border-2 border-gray-300 hover:border-blue-400 hover:bg-blue-50 text-gray-600 hover:text-blue-600 px-8 py-3"
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
              </Button>
            </div>
          </div>
        )}

        {/* Empty State */}
        {recipes.length === 0 && !isGenerating && !selectedMood && !showCustomInput && (
          <div className="text-center py-16">
            <div className="text-8xl mb-6">ü§î</div>
            <h3 className="text-2xl font-bold text-gray-800 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</h3>
            <p className="text-gray-500 text-lg max-w-md mx-auto">
              –ú—ã –ø–æ–¥–±–µ—Ä—ë–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–æ–¥–Ω–∏–º—É—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!
            </p>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="bg-gray-50 border-t border-gray-100 mt-20">
        <div className="container mx-auto px-4 py-8 text-center">
          <p className="text-gray-500">–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é</p>
        </div>
      </footer>
    </div>
  )
}
