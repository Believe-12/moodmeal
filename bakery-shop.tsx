"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ShoppingCart, Plus, Minus, Star, Heart, Search } from "lucide-react"
import { Input } from "@/components/ui/input"

interface Product {
  id: number
  name: string
  description: string
  price: number
  image: string
  category: string
  rating: number
  isNew?: boolean
}

interface CartItem extends Product {
  quantity: number
}

const products: Product[] = [
  {
    id: 1,
    name: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ç–æ—Ä—Ç",
    description: "–ù–µ–∂–Ω—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç —Å –∫—Ä–µ–º–æ–º –∏–∑ –±–µ–ª—å–≥–∏–π—Å–∫–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞",
    price: 2500,
    image: "/placeholder.svg?height=200&width=200",
    category: "–¢–æ—Ä—Ç—ã",
    rating: 4.9,
    isNew: true,
  },
  {
    id: 2,
    name: "–í–∞–Ω–∏–ª—å–Ω—ã–µ –∫–µ–∫—Å—ã",
    description: "–í–æ–∑–¥—É—à–Ω—ã–µ –∫–µ–∫—Å—ã —Å –≤–∞–Ω–∏–ª—å–Ω—ã–º –∫—Ä–µ–º–æ–º –∏ —è–≥–æ–¥–∞–º–∏",
    price: 450,
    image: "/placeholder.svg?height=200&width=200",
    category: "–ö–µ–∫—Å—ã",
    rating: 4.7,
  },
  {
    id: 3,
    name: "–Ø–±–ª–æ—á–Ω—ã–π –ø–∏—Ä–æ–≥",
    description: "–î–æ–º–∞—à–Ω–∏–π –ø–∏—Ä–æ–≥ —Å —Å–æ—á–Ω—ã–º–∏ —è–±–ª–æ–∫–∞–º–∏ –∏ –∫–æ—Ä–∏—Ü–µ–π",
    price: 800,
    image: "/placeholder.svg?height=200&width=200",
    category: "–ü–∏—Ä–æ–≥–∏",
    rating: 4.8,
  },
  {
    id: 4,
    name: "–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç",
    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Ç Red Velvet —Å –∫—Ä–µ–º—á–∏–∑–æ–º",
    price: 2800,
    image: "/placeholder.svg?height=200&width=200",
    category: "–¢–æ—Ä—Ç—ã",
    rating: 4.9,
  },
  {
    id: 5,
    name: "–õ–∏–º–æ–Ω–Ω—ã–µ –º–∞—Ñ—Ñ–∏–Ω—ã",
    description: "–°–≤–µ–∂–∏–µ –º–∞—Ñ—Ñ–∏–Ω—ã —Å –ª–∏–º–æ–Ω–Ω–æ–π —Ü–µ–¥—Ä–æ–π –∏ –≥–ª–∞–∑—É—Ä—å—é",
    price: 350,
    image: "/placeholder.svg?height=200&width=200",
    category: "–ö–µ–∫—Å—ã",
    rating: 4.6,
  },
  {
    id: 6,
    name: "–í–∏—à–Ω–µ–≤—ã–π –ø–∏—Ä–æ–≥",
    description: "–°–ª–æ–µ–Ω—ã–π –ø–∏—Ä–æ–≥ —Å —Å–æ—á–Ω–æ–π –≤–∏—à–Ω–µ–π –∏ —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–æ–π",
    price: 900,
    image: "/placeholder.svg?height=200&width=200",
    category: "–ü–∏—Ä–æ–≥–∏",
    rating: 4.7,
    isNew: true,
  },
]

const categories = ["–í—Å–µ", "–¢–æ—Ä—Ç—ã", "–ö–µ–∫—Å—ã", "–ü–∏—Ä–æ–≥–∏"]

export default function BakeryShop() {
  const [cart, setCart] = useState<CartItem[]>([])
  const [selectedCategory, setSelectedCategory] = useState("–í—Å–µ")
  const [searchQuery, setSearchQuery] = useState("")

  const filteredProducts = products.filter((product) => {
    const matchesCategory = selectedCategory === "–í—Å–µ" || product.category === selectedCategory
    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase())
    return matchesCategory && matchesSearch
  })

  const addToCart = (product: Product) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === product.id)
      if (existingItem) {
        return prevCart.map((item) => (item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item))
      }
      return [...prevCart, { ...product, quantity: 1 }]
    })
  }

  const removeFromCart = (productId: number) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === productId)
      if (existingItem && existingItem.quantity > 1) {
        return prevCart.map((item) => (item.id === productId ? { ...item, quantity: item.quantity - 1 } : item))
      }
      return prevCart.filter((item) => item.id !== productId)
    })
  }

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0)
  }

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-amber-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-orange-100">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-400 to-amber-400 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">üßÅ</span>
              </div>
              <h1 className="text-2xl font-bold text-orange-800">–°–ª–∞–¥–∫–∏–π –†–∞–π</h1>
            </div>

            <div className="flex items-center space-x-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –≤—ã–ø–µ—á–∫–∏..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 w-64"
                />
              </div>

              <Button variant="outline" className="relative">
                <ShoppingCart className="w-4 h-4 mr-2" />
                –ö–æ—Ä–∑–∏–Ω–∞
                {getTotalItems() > 0 && (
                  <Badge className="absolute -top-2 -right-2 bg-orange-500">{getTotalItems()}</Badge>
                )}
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-r from-orange-400 to-amber-400 text-white py-16">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold mb-4">–°–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!</h2>
          <p className="text-xl mb-8">–¢–æ—Ä—Ç—ã, –∫–µ–∫—Å—ã, –ø–∏—Ä–æ–≥–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</p>
          <Button size="lg" className="bg-white text-orange-600 hover:bg-orange-50">
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
          </Button>
        </div>
      </section>

      <div className="container mx-auto px-4 py-8">
        {/* Category Filter */}
        <div className="flex flex-wrap gap-2 mb-8">
          {categories.map((category) => (
            <Button
              key={category}
              variant={selectedCategory === category ? "default" : "outline"}
              onClick={() => setSelectedCategory(category)}
              className={selectedCategory === category ? "bg-orange-500 hover:bg-orange-600" : ""}
            >
              {category}
            </Button>
          ))}
        </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {filteredProducts.map((product) => (
            <Card key={product.id} className="overflow-hidden hover:shadow-lg transition-shadow">
              <div className="relative">
                <img
                  src={product.image || "/placeholder.svg"}
                  alt={product.name}
                  className="w-full h-48 object-cover"
                />
                {product.isNew && <Badge className="absolute top-2 left-2 bg-green-500">–ù–æ–≤–∏–Ω–∫–∞</Badge>}
                <Button variant="ghost" size="sm" className="absolute top-2 right-2 bg-white/80 hover:bg-white">
                  <Heart className="w-4 h-4" />
                </Button>
              </div>

              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">{product.name}</CardTitle>
                  <div className="flex items-center space-x-1">
                    <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                    <span className="text-sm text-gray-600">{product.rating}</span>
                  </div>
                </div>
                <CardDescription>{product.description}</CardDescription>
              </CardHeader>

              <CardFooter className="flex items-center justify-between">
                <div className="text-2xl font-bold text-orange-600">{product.price.toLocaleString()} ‚ÇΩ</div>

                <div className="flex items-center space-x-2">
                  {cart.find((item) => item.id === product.id) ? (
                    <div className="flex items-center space-x-2">
                      <Button size="sm" variant="outline" onClick={() => removeFromCart(product.id)}>
                        <Minus className="w-4 h-4" />
                      </Button>
                      <span className="font-semibold">{cart.find((item) => item.id === product.id)?.quantity}</span>
                      <Button size="sm" variant="outline" onClick={() => addToCart(product)}>
                        <Plus className="w-4 h-4" />
                      </Button>
                    </div>
                  ) : (
                    <Button onClick={() => addToCart(product)} className="bg-orange-500 hover:bg-orange-600">
                      <Plus className="w-4 h-4 mr-2" />–í –∫–æ—Ä–∑–∏–Ω—É
                    </Button>
                  )}
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>

        {/* Cart Summary */}
        {cart.length > 0 && (
          <Card className="bg-orange-50 border-orange-200">
            <CardHeader>
              <CardTitle className="text-orange-800">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {cart.map((item) => (
                  <div key={item.id} className="flex justify-between items-center">
                    <span>
                      {item.name} √ó {item.quantity}
                    </span>
                    <span className="font-semibold">{(item.price * item.quantity).toLocaleString()} ‚ÇΩ</span>
                  </div>
                ))}
              </div>
              <div className="border-t pt-2 mt-4">
                <div className="flex justify-between items-center text-lg font-bold">
                  <span>–ò—Ç–æ–≥–æ:</span>
                  <span className="text-orange-600">{getTotalPrice().toLocaleString()} ‚ÇΩ</span>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button className="w-full bg-orange-500 hover:bg-orange-600" size="lg">
                –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
              </Button>
            </CardFooter>
          </Card>
        )}
      </div>

      {/* Footer */}
      <footer className="bg-orange-800 text-white py-8 mt-16">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-lg font-semibold mb-4">–°–ª–∞–¥–∫–∏–π –†–∞–π</h3>
              <p className="text-orange-200">–õ—É—á—à–∞—è –≤—ã–ø–µ—á–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</p>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
              <p className="text-orange-200">–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67</p>
              <p className="text-orange-200">Email: info@sweetparadise.ru</p>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h3>
              <p className="text-orange-200">–ü–Ω-–í—Å: 8:00 - 22:00</p>
              <p className="text-orange-200">–î–æ—Å—Ç–∞–≤–∫–∞: 9:00 - 21:00</p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}
